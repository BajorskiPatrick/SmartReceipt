openapi: 3.0.3
info:
  title: "Inteligentny Asystent Zarządzania Wydatkami (Smart Receipt) API"
  description: |
    Specyfikacja API dla projektu "Inteligentny Asystent Zarządzania Wydatkami". 
    Dokumentacja opisuje interakcję pomiędzy frontendem (React), backendem (Spring Boot) oraz modułami AI (FastAPI).
    Główne cele to:
    - Automatyczna identyfikacja i kategoryzacja wydatków z paragonów.
    - Wizualizacja danych na interaktywnym dashboardzie.
    - Ręczne zarządzanie danymi finansowymi.
  version: "1.0.0"

servers:
  - url: "http://localhost:8080/api/v1"
    description: "Główny serwer backendowy (Spring Boot)"
  - url: "http://localhost:8000/api/v1"
    description: "Serwer modułu AI/ML (FastAPI)"

tags:
  - name: "1. Core API - Frontend -> Backend"
    description: "Endpointy wystawione przez główny backend (Spring Boot) dla aplikacji klienckiej (React)."
  - name: "2. AI API - Backend -> Moduł AI"
    description: "Wewnętrzne endpointy modułu AI (FastAPI), z których korzysta backend."

# ===============================================================
# Paths - Definicje Endpointów
# ===============================================================

paths:
  # ---------------------------------------------------------------
  # Core API: Uwierzytelnianie
  # ---------------------------------------------------------------
  /auth/register:
    post:
      operationId: registerUser
      tags:
        - "1. Core API - Frontend -> Backend"
      summary: "Rejestracja nowego użytkownika"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: "Użytkownik pomyślnie zarejestrowany"
        '400':
          description: "Błędne dane wejściowe"
  
  /auth/login:
    post:
      operationId: loginUser
      tags:
        - "1. Core API - Frontend -> Backend"
      summary: "Logowanie użytkownika"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: "Pomyślne logowanie"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: "Nieprawidłowe dane logowania"

  # ---------------------------------------------------------------
  # Core API: Zarządzanie Wydatkami
  # ---------------------------------------------------------------
  /expenses/upload:
    post:
      operationId: uploadReceipt
      tags:
        - "1. Core API - Frontend -> Backend"
      summary: "Przesłanie zdjęcia paragonu do przetworzenia"
      description: "Endpoint przyjmuje obraz paragonu. Backend wysyła go do modułu AI w celu ekstrakcji danych (OCR) i kategoryzacji, a następnie zapisuje przetworzony wydatek w bazie danych."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: "Plik obrazu paragonu"
      responses:
        '201':
          description: "Paragon przetworzony, wydatek utworzony"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'
        '500':
          description: "Błąd podczas przetwarzania obrazu"
          
  /expenses/manual:
    post:
      operationId: addManualExpense
      tags:
        - "1. Core API - Frontend -> Backend"
      summary: "Ręczne dodanie wydatku"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewExpense'
      responses:
        '201':
          description: "Wydatek dodany pomyślnie"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Expense'

  /expenses:
    get:
      operationId: getExpenses
      tags:
        - "1. Core API - Frontend -> Backend"
      summary: "Pobranie historii wydatków użytkownika"
      description: "Zwraca listę wszystkich wydatków zalogowanego użytkownika. Umożliwia filtrowanie, np. po dacie."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Lista wydatków"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Expense'
                  
  # ---------------------------------------------------------------
  # Core API: Dashboard
  # ---------------------------------------------------------------
  /dashboard/summary:
    get:
      operationId: getDashboardSummary
      tags:
        - "1. Core API - Frontend -> Backend"
      summary: "Pobranie zagregowanych danych do dashboardu"
      description: "Zwraca dane potrzebne do wizualizacji na dashboardzie, np. wydatki w podziale na kategorie w danym okresie."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Dane do dashboardu"
          content:
            application/json:
              schema:
                type: object
                properties:
                  spendingByCategory:
                    type: object
                    additionalProperties:
                      type: number
                  totalSpending:
                    type: number
  
  # ---------------------------------------------------------------
  # Core API: Listy Zakupowe
  # ---------------------------------------------------------------
  /shopping-lists:
    get:
      operationId: getShoppingLists
      tags:
        - "1. Core API - Frontend -> Backend"
      summary: "Pobranie list zakupowych użytkownika"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Lista list zakupowych"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingList'
    post:
      operationId: createShoppingList
      tags:
        - "1. Core API - Frontend -> Backend"
      summary: "Stworzenie nowej listy zakupowej"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewShoppingList'
      responses:
        '201':
          description: "Lista utworzona"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'

  /shopping-lists/suggestions:
    get:
      operationId: getShoppingListSuggestions
      tags:
        - "1. Core API - Frontend -> Backend"
      summary: "Pobranie sugestii produktów do listy zakupowej"
      description: "Opcjonalne rozszerzenie. System sugeruje produkty na podstawie historii zakupów."
      security:
        - bearerAuth: []
      responses:
        '200':
          description: "Lista sugerowanych produktów"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string

  # ---------------------------------------------------------------
  # AI API: OCR
  # ---------------------------------------------------------------
  /ai/ocr/process:
    post:
      operationId: processReceiptOcr
      tags:
        - "2. AI API - Backend -> Moduł AI"
      summary: "Przetwarzanie obrazu paragonu (OCR)"
      description: "Endpoint modułu AI, który przyjmuje obraz i zwraca ustrukturyzowane dane w formacie JSON. Wykorzystuje biblioteki takie jak Tesseract, easyocr lub PaddleOCR."
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: "Dane z paragonu wyekstrahowane pomyślnie"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OcrResult'
        '400':
          description: "Nie udało się przetworzyć obrazu"

  # ---------------------------------------------------------------
  # AI API: Kategoryzacja
  # ---------------------------------------------------------------
  /ai/categorize:
    post:
      operationId: categorizeExpenseItems
      tags:
        - "2. AI API - Backend -> Moduł AI"
      summary: "Automatyczna kategoryzacja pozycji z paragonu"
      description: "Endpoint modułu AI, który przyjmuje listę produktów i przypisuje je do predefiniowanych kategorii przy użyciu modeli opartych na transformerach."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/ExpenseItemBase'
      responses:
        '200':
          description: "Produkty skategoryzowane pomyślnie"
          content:
            application/json:
              schema:
                type: object
                properties:
                  categorizedItems:
                    type: array
                    items:
                      $ref: '#/components/schemas/CategorizedItem'

# ===============================================================
# Components - Schematy Danych i Bezpieczeństwo
# ===============================================================

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # --- Użytkownik i Autoryzacja ---
    UserRegistration:
      type: object
      properties:
        username:
          type: string
          example: "jan_kowalski"
        email:
          type: string
          format: email
          example: "jan.kowalski@example.com"
        password:
          type: string
          format: password
          example: "super_secret_password"
          
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: "Token JWT"

    # --- Wydatki ---
    Expense:
      type: object
      properties:
        id:
          type: string
          format: uuid
        storeName:
          type: string
          example: "Biedronka"
        transactionDate:
          type: string
          format: date-time
        totalAmount:
          type: number
          format: float
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseItem'

    NewExpense:
      type: object
      properties:
        storeName:
          type: string
        transactionDate:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/NewExpenseItem'

    ExpenseItemBase:
      type: object
      properties:
        productName:
          type: string
          example: "Mleko 2%"
        quantity:
          type: number
          default: 1
        price:
          type: number
          format: float
          
    ExpenseItem:
      allOf:
        - $ref: '#/components/schemas/ExpenseItemBase'
        - type: object
          properties:
            id:
              type: string
              format: uuid
            category:
              type: string
              example: "Spożywcze"

    NewExpenseItem:
      allOf:
        - $ref: '#/components/schemas/ExpenseItemBase'
        - type: object
          properties:
            category:
              type: string
              example: "Spożywcze"

    # --- Listy Zakupowe ---
    ShoppingList:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Zakupy na weekend"
        createdAt:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListItem'

    NewShoppingList:
      type: object
      properties:
        name:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/NewShoppingListItem'

    ShoppingListItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        productName:
          type: string
          example: "Chleb"
        isPurchased:
          type: boolean
          default: false
          
    NewShoppingListItem:
      type: object
      properties:
        productName:
          type: string

    # --- Schematy Modułu AI ---
    OcrResult:
      type: object
      description: "Ustrukturyzowane dane zwrócone przez moduł OCR."
      properties:
        storeName:
          type: string
        transactionDate:
          type: string
          format: date
        items:
          type: array
          items:
            $ref: '#/components/schemas/ExpenseItemBase'

    CategorizedItem:
      type: object
      properties:
        productName:
          type: string
        category:
          type: string
          example: "Spożywcze"